<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">

    <context:component-scan base-package="com.dmz.basic" />

    <!--数据连接池 -->
    <bean id="rootDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.name}" />
        <property name="password" value="${mysql.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒.(建议小于mysql的waite_timeout,mysql_waite_timeout一个连接长时间没有访问，则关闭连接，默认为8小时) -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!--当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接-->
        <!--配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。-->
        <!--具体查看官网信息：https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B-->
         <!--打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${remove.abandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${remove.abandoned.timeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${log.abandoned}"/>

        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <!--本地的數據庫-->
    <bean id="readLocalDataSource" parent="rootDataSource"
            p:password="${readLocal.password}"
            p:url="${readLocal.url}"/>

    <!--<bean id="dockerDataSource" parent="dataSource"-->
          <!--p:username="${mysql.name}"-->
          <!--p:password="${mysql.passwd}"-->
          <!--p:url="${docker.url}"/>-->

    <bean id="dataSource" class="com.dmz.basic.MultiReadDataSource">

        <property name="defaultTargetDataSource" ref="rootDataSource"/>
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="local" value-ref="readLocalDataSource"/>
                <entry key="docker" value-ref="rootDataSource"/>
            </map>
        </property>
        <property name="dataReadBalance" ref="dataReadBalance"/>

    </bean>

    <bean id="loadBalance" class="com.dmz.service.RandomBalance">
        <constructor-arg>
            <map key-type="java.lang.Integer" value-type="java.lang.String">
                <entry key="10" value="local"/>
                <entry key="90" value="docker"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="dataReadBalance" class="com.dmz.basic.DataReadBalance">
        <property name="loadBalance" ref="loadBalance"/>
    </bean>

    <!-- MyBatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:sqlMapper/*Mapper.xml" />
        <property name="configLocation" value="classpath:Mybatis-config.xml" />
        <!--分页-->
        <!--<property name="plugins">-->
            <!--<array>-->
                <!--<bean class="com.eif.framework.log.client.mybatis.MyBatisInterceptor" />-->
                <!--<bean class="com.eif.framework.pagination.pagehelper.PageHelper">-->
                    <!--<property name="properties" value="dialect=mysql" />-->
                <!--</bean>-->
            <!--</array>-->
        <!--</property>-->
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dmz.basic.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- JDBC 事务管理器 -->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->

    <!--建議使用的方式 JDBC 事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>


    <!--Druid 监控-->
    <bean id="druidStatInterceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />

    <!-- 事务拦截器 -->
    <bean id="transactionInterceptor"
          class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributeSource">
            <!--自动侦测事务注解-->
            <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
        </property>
        <!--事务传播属性配置,Spring默认PROPAGATION_REQUIRED-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    </bean>

</beans>
